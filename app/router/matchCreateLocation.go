// Code generated by re2dfa (https://github.com/opennota/re2dfa).

package router

import "unicode/utf8"

func matchCreateLocation(s []byte) (end int) {
	end = -1
	var r rune
	var rlen int
	i := 0
	_, _, _ = r, rlen, i
	switch {
	case i == 0:
		goto s2
	}
	return
s2:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 47:
		goto s3
	}
	return
s3:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 108:
		goto s4
	}
	return
s4:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 111:
		goto s5
	}
	return
s5:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 99:
		goto s6
	}
	return
s6:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 97:
		goto s7
	}
	return
s7:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 116:
		goto s8
	}
	return
s8:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 105:
		goto s9
	}
	return
s9:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 111:
		goto s10
	}
	return
s10:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 110:
		goto s11
	}
	return
s11:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 115:
		goto s12
	}
	return
s12:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 47:
		goto s13
	}
	return
s13:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 110:
		goto s14
	}
	return
s14:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 101:
		goto s15
	}
	return
s15:
	r, rlen = utf8.DecodeRune(s[i:])
	if rlen == 0 {
		return
	}
	i += rlen
	switch {
	case r == 119:
		goto s16
	}
	return
s16:
	switch {
	case i == len(s):
		end = i
	}
	return
}

