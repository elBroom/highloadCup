// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schema

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7cd68f2dDecodeGithubComElBroomHighloadCupAppSchema(in *jlexer.Lexer, out *ResponceLocationVisits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avg":
			out.Avg = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7cd68f2dEncodeGithubComElBroomHighloadCupAppSchema(out *jwriter.Writer, in ResponceLocationVisits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avg\":")
	out.Float64(float64(in.Avg))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponceLocationVisits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7cd68f2dEncodeGithubComElBroomHighloadCupAppSchema(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponceLocationVisits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7cd68f2dEncodeGithubComElBroomHighloadCupAppSchema(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponceLocationVisits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7cd68f2dDecodeGithubComElBroomHighloadCupAppSchema(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponceLocationVisits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7cd68f2dDecodeGithubComElBroomHighloadCupAppSchema(l, v)
}
func easyjson7cd68f2dDecodeGithubComElBroomHighloadCupAppSchema1(in *jlexer.Lexer, out *RequestLocationVisits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fromDate":
			if in.IsNull() {
				in.Skip()
				out.FromDate = nil
			} else {
				if out.FromDate == nil {
					out.FromDate = new(int64)
				}
				*out.FromDate = int64(in.Int64())
			}
		case "toDate":
			if in.IsNull() {
				in.Skip()
				out.ToDate = nil
			} else {
				if out.ToDate == nil {
					out.ToDate = new(int64)
				}
				*out.ToDate = int64(in.Int64())
			}
		case "fromAge":
			if in.IsNull() {
				in.Skip()
				out.FromAge = nil
			} else {
				if out.FromAge == nil {
					out.FromAge = new(int)
				}
				*out.FromAge = int(in.Int())
			}
		case "toAge":
			if in.IsNull() {
				in.Skip()
				out.ToAge = nil
			} else {
				if out.ToAge == nil {
					out.ToAge = new(int)
				}
				*out.ToAge = int(in.Int())
			}
		case "genser":
			if in.IsNull() {
				in.Skip()
				out.Gender = nil
			} else {
				if out.Gender == nil {
					out.Gender = new(string)
				}
				*out.Gender = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7cd68f2dEncodeGithubComElBroomHighloadCupAppSchema1(out *jwriter.Writer, in RequestLocationVisits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fromDate\":")
	if in.FromDate == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.FromDate))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"toDate\":")
	if in.ToDate == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.ToDate))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fromAge\":")
	if in.FromAge == nil {
		out.RawString("null")
	} else {
		out.Int(int(*in.FromAge))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"toAge\":")
	if in.ToAge == nil {
		out.RawString("null")
	} else {
		out.Int(int(*in.ToAge))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"genser\":")
	if in.Gender == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Gender))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestLocationVisits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7cd68f2dEncodeGithubComElBroomHighloadCupAppSchema1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestLocationVisits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7cd68f2dEncodeGithubComElBroomHighloadCupAppSchema1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestLocationVisits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7cd68f2dDecodeGithubComElBroomHighloadCupAppSchema1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestLocationVisits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7cd68f2dDecodeGithubComElBroomHighloadCupAppSchema1(l, v)
}
