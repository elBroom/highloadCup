// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schema

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson15d499e9DecodeGithubComElBroomHighloadCupAppSchema(in *jlexer.Lexer, out *ResponceUserVisits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "visits":
			if in.IsNull() {
				in.Skip()
				out.Visits = nil
			} else {
				in.Delim('[')
				if out.Visits == nil {
					if !in.IsDelim(']') {
						out.Visits = make([]*ResponceUserVisit, 0, 8)
					} else {
						out.Visits = []*ResponceUserVisit{}
					}
				} else {
					out.Visits = (out.Visits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ResponceUserVisit
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ResponceUserVisit)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v1).UnmarshalJSON(data))
						}
					}
					out.Visits = append(out.Visits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson15d499e9EncodeGithubComElBroomHighloadCupAppSchema(out *jwriter.Writer, in ResponceUserVisits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visits\":")
	if in.Visits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Visits {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v3).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponceUserVisits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson15d499e9EncodeGithubComElBroomHighloadCupAppSchema(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponceUserVisits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson15d499e9EncodeGithubComElBroomHighloadCupAppSchema(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponceUserVisits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson15d499e9DecodeGithubComElBroomHighloadCupAppSchema(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponceUserVisits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson15d499e9DecodeGithubComElBroomHighloadCupAppSchema(l, v)
}
func easyjson15d499e9DecodeGithubComElBroomHighloadCupAppSchema1(in *jlexer.Lexer, out *ResponceUserVisit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mark":
			if in.IsNull() {
				in.Skip()
				out.Mark = nil
			} else {
				if out.Mark == nil {
					out.Mark = new(uint8)
				}
				*out.Mark = uint8(in.Uint8())
			}
		case "visited_at":
			if in.IsNull() {
				in.Skip()
				out.Visited_at = nil
			} else {
				if out.Visited_at == nil {
					out.Visited_at = new(int64)
				}
				*out.Visited_at = int64(in.Int64())
			}
		case "place":
			if in.IsNull() {
				in.Skip()
				out.Place = nil
			} else {
				if out.Place == nil {
					out.Place = new(string)
				}
				*out.Place = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson15d499e9EncodeGithubComElBroomHighloadCupAppSchema1(out *jwriter.Writer, in ResponceUserVisit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	if in.Mark == nil {
		out.RawString("null")
	} else {
		out.Uint8(uint8(*in.Mark))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	if in.Visited_at == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.Visited_at))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"place\":")
	if in.Place == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Place))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponceUserVisit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson15d499e9EncodeGithubComElBroomHighloadCupAppSchema1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponceUserVisit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson15d499e9EncodeGithubComElBroomHighloadCupAppSchema1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponceUserVisit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson15d499e9DecodeGithubComElBroomHighloadCupAppSchema1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponceUserVisit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson15d499e9DecodeGithubComElBroomHighloadCupAppSchema1(l, v)
}
func easyjson15d499e9DecodeGithubComElBroomHighloadCupAppSchema2(in *jlexer.Lexer, out *RequestUserVisits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fromDate":
			if in.IsNull() {
				in.Skip()
				out.FromDate = nil
			} else {
				if out.FromDate == nil {
					out.FromDate = new(int64)
				}
				*out.FromDate = int64(in.Int64())
			}
		case "toDate":
			if in.IsNull() {
				in.Skip()
				out.ToDate = nil
			} else {
				if out.ToDate == nil {
					out.ToDate = new(int64)
				}
				*out.ToDate = int64(in.Int64())
			}
		case "country":
			if in.IsNull() {
				in.Skip()
				out.Country = nil
			} else {
				if out.Country == nil {
					out.Country = new(string)
				}
				*out.Country = string(in.String())
			}
		case "toDistance":
			if in.IsNull() {
				in.Skip()
				out.ToDistance = nil
			} else {
				if out.ToDistance == nil {
					out.ToDistance = new(uint32)
				}
				*out.ToDistance = uint32(in.Uint32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson15d499e9EncodeGithubComElBroomHighloadCupAppSchema2(out *jwriter.Writer, in RequestUserVisits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fromDate\":")
	if in.FromDate == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.FromDate))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"toDate\":")
	if in.ToDate == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.ToDate))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"country\":")
	if in.Country == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Country))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"toDistance\":")
	if in.ToDistance == nil {
		out.RawString("null")
	} else {
		out.Uint32(uint32(*in.ToDistance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestUserVisits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson15d499e9EncodeGithubComElBroomHighloadCupAppSchema2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestUserVisits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson15d499e9EncodeGithubComElBroomHighloadCupAppSchema2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestUserVisits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson15d499e9DecodeGithubComElBroomHighloadCupAppSchema2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestUserVisits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson15d499e9DecodeGithubComElBroomHighloadCupAppSchema2(l, v)
}
