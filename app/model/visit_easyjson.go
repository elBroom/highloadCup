// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE564fc13DecodeGithubComElBroomHighloadCupAppModel(in *jlexer.Lexer, out *Visits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "visits":
			if in.IsNull() {
				in.Skip()
				out.Visits = nil
			} else {
				in.Delim('[')
				if out.Visits == nil {
					if !in.IsDelim(']') {
						out.Visits = make([]Visit, 0, 1)
					} else {
						out.Visits = []Visit{}
					}
				} else {
					out.Visits = (out.Visits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Visit
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Visits = append(out.Visits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeGithubComElBroomHighloadCupAppModel(out *jwriter.Writer, in Visits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visits\":")
	if in.Visits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Visits {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.Raw((v3).MarshalJSON())
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Visits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE564fc13EncodeGithubComElBroomHighloadCupAppModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Visits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE564fc13EncodeGithubComElBroomHighloadCupAppModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE564fc13DecodeGithubComElBroomHighloadCupAppModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE564fc13DecodeGithubComElBroomHighloadCupAppModel(l, v)
}
func easyjsonE564fc13DecodeGithubComElBroomHighloadCupAppModel1(in *jlexer.Lexer, out *Visit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(uint32)
				}
				*out.ID = uint32(in.Uint32())
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.LocationID = nil
			} else {
				if out.LocationID == nil {
					out.LocationID = new(uint32)
				}
				*out.LocationID = uint32(in.Uint32())
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(uint32)
				}
				*out.UserID = uint32(in.Uint32())
			}
		case "visited_at":
			if in.IsNull() {
				in.Skip()
				out.VisitedAt = nil
			} else {
				if out.VisitedAt == nil {
					out.VisitedAt = new(int64)
				}
				*out.VisitedAt = int64(in.Int64())
			}
		case "mark":
			if in.IsNull() {
				in.Skip()
				out.Mark = nil
			} else {
				if out.Mark == nil {
					out.Mark = new(uint8)
				}
				*out.Mark = uint8(in.Uint8())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeGithubComElBroomHighloadCupAppModel1(out *jwriter.Writer, in Visit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Uint32(uint32(*in.ID))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"location\":")
	if in.LocationID == nil {
		out.RawString("null")
	} else {
		out.Uint32(uint32(*in.LocationID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	if in.UserID == nil {
		out.RawString("null")
	} else {
		out.Uint32(uint32(*in.UserID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	if in.VisitedAt == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.VisitedAt))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	if in.Mark == nil {
		out.RawString("null")
	} else {
		out.Uint8(uint8(*in.Mark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Visit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE564fc13EncodeGithubComElBroomHighloadCupAppModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Visit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE564fc13EncodeGithubComElBroomHighloadCupAppModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE564fc13DecodeGithubComElBroomHighloadCupAppModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE564fc13DecodeGithubComElBroomHighloadCupAppModel1(l, v)
}
