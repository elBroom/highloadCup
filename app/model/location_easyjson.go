// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson14b80819DecodeGithubComElBroomHighloadCupAppModel(in *jlexer.Lexer, out *Locations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "locations":
			if in.IsNull() {
				in.Skip()
				out.Locations = nil
			} else {
				in.Delim('[')
				if out.Locations == nil {
					if !in.IsDelim(']') {
						out.Locations = make([]Location, 0, 1)
					} else {
						out.Locations = []Location{}
					}
				} else {
					out.Locations = (out.Locations)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Location
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Locations = append(out.Locations, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b80819EncodeGithubComElBroomHighloadCupAppModel(out *jwriter.Writer, in Locations) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"locations\":")
	if in.Locations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Locations {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.Raw((v3).MarshalJSON())
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Locations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b80819EncodeGithubComElBroomHighloadCupAppModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Locations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b80819EncodeGithubComElBroomHighloadCupAppModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Locations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b80819DecodeGithubComElBroomHighloadCupAppModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Locations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b80819DecodeGithubComElBroomHighloadCupAppModel(l, v)
}
func easyjson14b80819DecodeGithubComElBroomHighloadCupAppModel1(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(uint32)
				}
				*out.ID = uint32(in.Uint32())
			}
		case "place":
			if in.IsNull() {
				in.Skip()
				out.Place = nil
			} else {
				if out.Place == nil {
					out.Place = new(string)
				}
				*out.Place = string(in.String())
			}
		case "country":
			if in.IsNull() {
				in.Skip()
				out.Country = nil
			} else {
				if out.Country == nil {
					out.Country = new(string)
				}
				*out.Country = string(in.String())
			}
		case "city":
			if in.IsNull() {
				in.Skip()
				out.City = nil
			} else {
				if out.City == nil {
					out.City = new(string)
				}
				*out.City = string(in.String())
			}
		case "distance":
			if in.IsNull() {
				in.Skip()
				out.Distance = nil
			} else {
				if out.Distance == nil {
					out.Distance = new(uint32)
				}
				*out.Distance = uint32(in.Uint32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b80819EncodeGithubComElBroomHighloadCupAppModel1(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.Uint32(uint32(*in.ID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"place\":")
	if in.Place == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Place))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"country\":")
	if in.Country == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Country))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"city\":")
	if in.City == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.City))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"distance\":")
	if in.Distance == nil {
		out.RawString("null")
	} else {
		out.Uint32(uint32(*in.Distance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b80819EncodeGithubComElBroomHighloadCupAppModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b80819EncodeGithubComElBroomHighloadCupAppModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b80819DecodeGithubComElBroomHighloadCupAppModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b80819DecodeGithubComElBroomHighloadCupAppModel1(l, v)
}
